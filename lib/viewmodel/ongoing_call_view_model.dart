
import 'dart:async';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:mangxahoi/model/model_call.dart';
import 'package:mangxahoi/model/model_user.dart';
import 'package:mangxahoi/services/call_service.dart';
import 'package:mangxahoi/request/user_request.dart';
import 'package:zego_express_engine/zego_express_engine.dart';

class OngoingCallViewModel extends ChangeNotifier {
  final CallService callService;
  final CallModel call;
  final bool isReceiver; // <--- TH√äM D√íNG N√ÄY

  // State
  bool isMuted = false;
  bool isSpeakerOn = true;
  bool isVideoOff = false;
  bool isFrontCamera = true;
  int durationInSeconds = 0;
  String otherUserName = "ƒêang t·∫£i...";
  String otherUserAvatar = "";
  String callStatusText = "ƒêang k·∫øt n·ªëi...";

  // Bi·∫øn n·ªôi b·ªô
  int? _localViewID;
  int? _remoteViewID;
  Widget? _localVideoView;
  Widget? _remoteVideoView;
  String? _remoteStreamID;
  Timer? _timer;
  StreamSubscription? _callStatusSubscription;

  // ‚ñº‚ñº‚ñº S·ª¨A CONSTRUCTOR ‚ñº‚ñº‚ñº
  OngoingCallViewModel({
    required this.call, 
    required this.callService, 
    this.isReceiver = false // <--- TH√äM D√íNG N√ÄY
  }) {
    isVideoOff = (call.mediaType == CallMediaType.audio);
    isSpeakerOn = true; 
    callService.toggleSpeaker(isSpeakerOn);
  }

  // ‚ñº‚ñº‚ñº S·ª¨A H√ÄM INIT ‚ñº‚ñº‚ñº
  void init() {
    _getOtherUserInfo();

    if (call.mediaType == CallMediaType.video) {
      _initVideoViews();
    }
    
    // 1. LU√îN LU√îN l·∫Øng nghe s·ª± ki·ªán TR∆Ø·ªöC
    _initZegoEventHandlers(); 
    
    if (isReceiver) {
      // 2. N·∫æU L√Ä NG∆Ø·ªúI NH·∫¨N, B√ÇY GI·ªú M·ªöI G·ªåI ACCEPTCALL
      print("üìû [ViewModel] L√† ng∆∞·ªùi nh·∫≠n, ƒëang g·ªçi acceptCall()...");
      callService.acceptCall(call); 
    } else {
      // 3. N·∫æU L√Ä NG∆Ø·ªúI G·ªåI, B·∫ÆT ƒê·∫¶U ƒê·∫æM GI·ªú NGAY
      _startTimer();
    }
  }
  // ‚ñ≤‚ñ≤‚ñ≤ K·∫æT TH√öC S·ª¨A H√ÄM INIT ‚ñ≤‚ñ≤‚ñ≤

  void _startTimer() {
    if (_timer != null && _timer!.isActive) return; // ƒê·∫£m b·∫£o ch·ªâ ch·∫°y 1 l·∫ßn
    _timer = Timer.periodic(Duration(seconds: 1), (timer) {
      durationInSeconds++;
      notifyListeners();
    });
  }

  String get formattedDuration {
    // N·∫øu ch∆∞a b·∫Øt ƒë·∫ßu, hi·ªÉn th·ªã tr·∫°ng th√°i
    if (durationInSeconds == 0 && callStatusText.isNotEmpty) return callStatusText;
    
    final min = (durationInSeconds ~/ 60).toString().padLeft(2, '0');
    final sec = (durationInSeconds % 60).toString().padLeft(2, '0');
    return "$min:$sec";
  }

  void _getOtherUserInfo() async {
    String otherUserId = (call.callerId == callService.currentUserId)
        ? call.receiverIds.first
        : call.callerId;

    try {
      UserModel? user = await UserRequest().getUserByUid(otherUserId);
      if (user != null) {
        otherUserName = user.name;
        otherUserAvatar = user.avatar.isNotEmpty ? user.avatar.first : "";
      } else {
        otherUserName = "Kh√¥ng t√¨m th·∫•y";
      }
    } catch (e) {
      otherUserName = "L·ªói t·∫£i t√™n";
    }
    
    notifyListeners(); // Lu√¥n c·∫≠p nh·∫≠t UI
  }

  void _initVideoViews() async {
    _localVideoView = await ZegoExpressEngine.instance.createCanvasView((viewID) {
      _localViewID = viewID;
      ZegoCanvas canvas = ZegoCanvas(viewID, viewMode: ZegoViewMode.AspectFill);
      ZegoExpressEngine.instance.startPreview(canvas: canvas);
    });
    notifyListeners();
  }

  void _initZegoEventHandlers() {
    // L·∫Øng nghe tr·∫°ng th√°i ph√≤ng
    ZegoExpressEngine.onRoomStateChanged = (String roomID, ZegoRoomStateChangedReason reason, int errorCode, Map<String, dynamic> extendedData) {
      print("üö© [ZEGO EVENT] onRoomStateChanged: $reason, errorCode: $errorCode");
      if (reason == ZegoRoomStateChangedReason.LoginFailed) {
        callStatusText = "K·∫øt n·ªëi th·∫•t b·∫°i";
        notifyListeners();
      } else if (reason == ZegoRoomStateChangedReason.Logined) { 
        // ‚ñº‚ñº‚ñº S·ª¨A LOGIC ƒê·∫æM GI·ªú ‚ñº‚ñº‚ñº
        // Ng∆∞·ªùi g·ªçi ƒë√£ b·∫Øt ƒë·∫ßu ƒë·∫øm. Ng∆∞·ªùi nh·∫≠n ch·ªâ ƒë·∫øm khi login th√†nh c√¥ng.
        if (isReceiver) { 
           _startTimer();
        }
        // ‚ñ≤‚ñ≤‚ñ≤ K·∫æT TH√öC S·ª¨A ‚ñ≤‚ñ≤‚ñ≤
        callStatusText = ""; // X√≥a "ƒêang k·∫øt n·ªëi..."
        notifyListeners();
      } else if (reason == ZegoRoomStateChangedReason.ReconnectFailed || 
                 reason == ZegoRoomStateChangedReason.KickOut) { 
        callStatusText = "ƒê√£ m·∫•t k·∫øt n·ªëi";
        notifyListeners();
      } else if (reason == ZegoRoomStateChangedReason.Logout) {
        callStatusText = "ƒê√£ ƒëƒÉng xu·∫•t";
        notifyListeners();
      }
    };

    // L·∫Øng nghe stream (video/audio c·ªßa ng∆∞·ªùi kia)
    ZegoExpressEngine.onRoomStreamUpdate = (String roomID, ZegoUpdateType updateType,
        List<ZegoStream> streamList, Map<String, dynamic> extendedData) async {
      
      if (updateType == ZegoUpdateType.Add) {
        print("üö© [ZEGO EVENT] onRoomStreamUpdate: ADD (Nh·∫≠n ƒë∆∞·ª£c stream t·ª´ ng∆∞·ªùi kia)");
        _remoteStreamID = streamList.first.streamID;
        
        if (call.mediaType == CallMediaType.video) {
          _remoteVideoView = await ZegoExpressEngine.instance.createCanvasView((viewID) {
            _remoteViewID = viewID;
            ZegoCanvas canvas = ZegoCanvas(viewID, viewMode: ZegoViewMode.AspectFill);
            ZegoExpressEngine.instance.startPlayingStream(_remoteStreamID!, canvas: canvas);
          });
        } else {
          // N·∫øu l√† audio call, ch·ªâ c·∫ßn start playing
          ZegoExpressEngine.instance.startPlayingStream(_remoteStreamID!);
        }
        notifyListeners();
        
      } else if (updateType == ZegoUpdateType.Delete) {
        print("üö© [ZEGO EVENT] onRoomStreamUpdate: DELETE (Ng∆∞·ªùi kia d·ª´ng stream)");
        if (_remoteStreamID != null) {
          ZegoExpressEngine.instance.stopPlayingStream(_remoteStreamID!);
          if (_remoteViewID != null) {
            ZegoExpressEngine.instance.destroyCanvasView(_remoteViewID!);
          }
          _remoteVideoView = null;
          _remoteViewID = null;
          _remoteStreamID = null;
          notifyListeners();
        }
      }
    };
  }

  Widget getLocalVideoView() {
    if (_localVideoView != null) {
      return _localVideoView!;
    }
    return Container(
      color: Colors.black.withOpacity(0.5),
      child: Icon(Icons.person, color: Colors.white, size: 50),
    );
  }

  Widget getRemoteVideoView() {
    if (_remoteVideoView != null) {
      return _remoteVideoView!;
    }
    return Container(
      color: Colors.black,
      child: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            CircularProgressIndicator(color: Colors.white),
            SizedBox(height: 16),
            Text(
              callStatusText, // Hi·ªÉn th·ªã tr·∫°ng th√°i
              style: TextStyle(color: Colors.white),
            ),
          ],
        ),
      ),
    );
  }

  //--- ƒêi·ªÅu khi·ªÉn ---
  void onToggleMute() {
    isMuted = !isMuted;
    callService.toggleMute(isMuted);
    notifyListeners();
  }

  void onToggleSpeaker() {
    isSpeakerOn = !isSpeakerOn;
    callService.toggleSpeaker(isSpeakerOn);
    notifyListeners();
  }

  void onToggleVideo() {
    isVideoOff = !isVideoOff;
    ZegoExpressEngine.instance.mutePublishStreamVideo(isVideoOff);
    notifyListeners();
  }

  void onSwitchCamera() {
    isFrontCamera = !isFrontCamera;
    ZegoExpressEngine.instance.useFrontCamera(isFrontCamera);
    notifyListeners();
  }

  Future<void> onEndCall(BuildContext context) async {
    // cleanup() s·∫Ω ƒë∆∞·ª£c g·ªçi b·ªüi dispose() khi Navigator.pop()
    // Ch·ªâ c·∫ßn g·ªçi service ƒë·ªÉ endCall tr√™n Firestore
    await callService.endCall(call);
    
    // T·ª± pop m√†n h√¨nh
    if (Navigator.canPop(context)) {
      Navigator.pop(context);
    }
  }

  void cleanup() {
    print("üßº [ViewModel] cleanup() ƒë∆∞·ª£c g·ªçi");
    _timer?.cancel();
    _callStatusSubscription?.cancel();

    // H·ªßy callback
    ZegoExpressEngine.onRoomStateChanged = null;
    ZegoExpressEngine.onRoomStreamUpdate = null;

    // D·ª´ng stream
    if (_remoteStreamID != null) {
      ZegoExpressEngine.instance.stopPlayingStream(_remoteStreamID!);
    }
    
    // D·ª´ng t√°c v·ª• Zego
    print("üßº [ViewModel] ƒêang g·ªçi stopPublishingStream...");
    ZegoExpressEngine.instance.stopPublishingStream(); 
    
    print("üßº [ViewModel] ƒêang g·ªçi stopPreview...");
    ZegoExpressEngine.instance.stopPreview();

    // Destroy views
    if (_localViewID != null) {
      ZegoExpressEngine.instance.destroyCanvasView(_localViewID!);
    }
    if (_remoteViewID != null) {
      ZegoExpressEngine.instance.destroyCanvasView(_remoteViewID!);
    }
    
    // ƒêƒÉng xu·∫•t kh·ªèi ph√≤ng Zego
    print("üßº [ViewModel] ƒêang logout kh·ªèi ph√≤ng: ${call.channelName}");
    ZegoExpressEngine.instance.logoutRoom(call.channelName);

    // ‚ñº‚ñº‚ñº TH√äM D√íNG N√ÄY: BU·ªòC RESET LOA SAU KHI LOGOUT ‚ñº‚ñº‚ñº
    // Vi·ªác n√†y s·∫Ω g·ªçi setAudioRouteToSpeaker(false) ƒë·ªÉ gi·∫£i ph√≥ng focus cao nh·∫•t
    print("üßº [ViewModel] ƒêang reset audio route v·ªÅ m·∫∑c ƒë·ªãnh...");
    callService.toggleSpeaker(false); 
    // ‚ñ≤‚ñ≤‚ñ≤ K·∫æT TH√öC TH√äM D√íNG N√ÄY ‚ñ≤‚ñ≤‚ñ≤

    // Reset state
    _localViewID = null;
    _localVideoView = null;
    _remoteViewID = null;
    _remoteVideoView = null;
    _remoteStreamID = null;
  }
}